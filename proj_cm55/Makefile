################################################################################
# \file Makefile
# \version 1.0
#
# \brief
# Makefile for configuring the Cortex-M55 core project
#
################################################################################
# \copyright
# Copyright 2025, Cypress Semiconductor Corporation (an Infineon company)
# SPDX-License-Identifier: Apache-2.0
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

include ../common.mk

################################################################################
# Basic Configuration
################################################################################


# Name of application (used to derive name of final linked file).
#
# If APPNAME is edited, ensure to update or regenerate launch
# configurations for your IDE.
APPNAME=proj_cm55
APPTYPE=flash

# If set to "true" or "1", display full command-lines when building.
VERBOSE=


################################################################################
# Advanced Configuration
################################################################################

# Enable optional code that is ordinarily disabled by default.
#
# Available components depend on the specific targeted hardware and firmware
# in use. In general, if you have
#
#    COMPONENTS=foo bar
#
# ... then code in directories named COMPONENT_foo and COMPONENT_bar will be
# added to the build
#
COMPONENTS += FREERTOS RTOS_AWARE  

# Like COMPONENTS, but disable optional code that was enabled by default.
DISABLE_COMPONENTS+=

CORE=CM55
CORE_NAME=CM55_0
NPU=U55

# By default the build system automatically looks in the Makefile's directory
# tree for source code and builds it. The SOURCES variable can be used to
# manually add source code to the build process from a location not searched
# by default, or otherwise not found by the build system.
SOURCES+= 

# Like SOURCES, but for include directories. Value should be paths to
# directories (without a leading -I).
INCLUDES+=

# Add additional defines to the build process (without a leading -D).
DEFINES += CY_RTOS_AWARE

DEFINES += FLASH_BOOT

# Select softfp or hardfp floating point. Default is softfp.
VFP_SELECT = hardfp

# Additional / custom C compiler flags.
#
# NOTE: Includes and defines should use the INCLUDES and DEFINES variable
# above.
CFLAGS+=

# Additional / custom C++ compiler flags.
#
# NOTE: Includes and defines should use the INCLUDES and DEFINES variable
# above.
CXXFLAGS+=

# Additional / custom assembler flags.
#
# NOTE: Includes and defines should use the INCLUDES and DEFINES variable
# above.
ASFLAGS+=

# Additional / custom linker flags.
LDFLAGS+=

# Additional / custom libraries to link in to the application.
LDLIBS+=

# Path to the linker script to use (if empty, use the default linker script).
 LINKER_SCRIPT=
# Custom pre-build commands to run.
PREBUILD+=

# Custom post-build commands to run.
POSTBUILD+=

################################################################################
# Application specific Configurations to use COMPONENTS, DEFINES and flags.
################################################################################
DEFINES += CY_RETARGET_IO_CONVERT_LF_TO_CRLF

#Common modules for M55
COMPONENTS += MODULES_HP
#Audio playback
ENABLE_PLAYBACK=Y
ifeq ($(ENABLE_PLAYBACK),Y)
DEFINES += AUDIO_OUT
COMPONENTS += AUDIO_PLAYBACK
endif
# Playback Sampling Rate. Options are
# 16K - 16KHz Audio Playback.
# 44.1K - 44.1KHz Audio Playback. (Default)
# 48K - 48KHz Audio Playback. 

CONFIG_PLAYBACK_RATE=44.1K

ifeq ($(CONFIG_PLAYBACK_RATE),48K)
    DEFINES +=I2S_SAMPLING_RATE=48000
endif
ifeq ($(CONFIG_PLAYBACK_RATE),16K)
    DEFINES +=I2S_SAMPLING_RATE=16000
endif
ifeq ($(CONFIG_PLAYBACK_RATE),44.1K)
    DEFINES +=I2S_SAMPLING_RATE=44100
endif
#For Profiler
COMPONENTS += PROFILER
DEFINES+=PROFILER_ENABLE

#AFE configuration and related macros
COMPONENTS += AUDIO_FRONT_END
COMPONENTS += AFE_CONFIGURATION
COMPONENTS += CMSIS_DSP

ifeq ($(TOOLCHAIN),GCC_ARM)
    DEFINES += ARM_MATH_AUTOVECTORIZE
endif

DEFINES += RUN_FLOAT_FE
DEFINES += ENABLE_AFE_MW_SUPPORT
#DEFINES +=AFE_AUDIO_PROCESSING_TASK_PRIORITY=2

#Set the memory area for ML Based Noise Suppression weights and parameters
DEFINES+=DSNS_ENABLE_MTB_ML
COMPONENTS+=MW_DSNS_MODEL

#Audio conversion utility and application logger
COMPONENTS += APP_LOGGER AUDIO_FORMAT_UTILS

#Inferencing Interface
COMPONENTS += INFERENCING_INTERFACE



ifeq ($(CONFIG_INFERENCING_LIB),ITSI_M55_U55)
    ITSI_LIB=Y
    COMPONENTS+=U55_MODEL
    DEFINES+=USE_MTB_ML
    DEFINES += ITSI_INFERENCING
endif

ifeq ($(CONFIG_INFERENCING_LIB),SENSORY)
    DEFINES += SENSORY_INFERENCING
    COMPONENTS +=SENSORY
    COMPONENTS += SENSORY_MUSIC_PLAYER
    DEFINES +=SENSORY_U55_TFLM
endif
# Neural Network Configuration. Options include
#
# float    -- floating point for the input data and weights
# int8x8   -- 8-bit fixed-point for the input data and weights
NN_TYPE=int16x8#int16x8 (ITSI v1.2.5)#int8x8 Only for WWD.

# Choose the inference engine
# tflm      -- TensorFlow Lite for Microcontrollers inference engine with interpreter
# Note tflm_less option is not supported on CM55+U55
NN_INFERENCE_ENGINE=tflm

NPU=U55

DEFINES+=ETHOSU55

# Add additional components related to MTB ML
COMPONENTS+=CMSIS_DSP U55

#Default Cache management is all layers.
#DEFINES+=MTB_ML_ETHOSU_CACHE_MGMT_TYPE=MTB_ML_ETHOSU_CACHE_MGMT_ALL_LAYERS


# Add additional define/components to select the inference engine
ifeq (tflm, $(NN_INFERENCE_ENGINE))
    COMPONENTS+=ML_TFLM
    DEFINES+=TF_LITE_STATIC_MEMORY
endif

DEFINES+= CY_ML_MODEL_MEM=.cy_socmem_data
ifeq (int16x8, $(NN_TYPE))
    COMPONENTS+=ML_INT16x8
endif
ifeq (int8x8, $(NN_TYPE))
    COMPONENTS+=ML_INT8x8
endif
   
ifeq ($(ITSI_LIB),Y)    
    DEFINES += ITSI_INFERENCING
    COMPONENTS += ITSI_v1_2_5
    DEFINES += ITSI_M55_U55
    COMPONENTS +=ITSI_ARM
    DEFINES += EMBEDDED_DEV    #EMBEDDED_DEV is must to build #IFX algorithms for SOD, LPWWD MW
    DEFINES += ENABLE_IFX_SOD  #ENABLE_IFX_SOD is must to build #IFX algorithms for SOD
    DEFINES += ENABLE_IFX_PRE_PROCESS_HPF #To enable HPF
 

    DEFINES += ENABLE_IFX_ITSI 
    DEFINES += ENABLE_IFX_ITSI_WWD
    DEFINES += ENABLE_IFX_ITSI_CMD
    #Only for WWD inferencing
    #DEFINES += WWD_ONLY
    CY_IGNORE += ./source/COMPONENT_MODULES_HP/COMPONENT_ITSI_v1_2_5/src/ifx_itsi_wwd_only.c
    ifeq ($(PTT_EN),Y) #Only for disabling WW completely
        DEFINES += ENABLE_PUSH_TO_TALK
        CY_IGNORE += ./source/COMPONENT_MODULES_HP/COMPONENT_ITSI_v1_2_5/src/ifx_itsi_wwd_ptt.c
    else
        CY_IGNORE += ./source/COMPONENT_MODULES_HP/COMPONENT_ITSI_v1_2_5/src/ifx_itsi.c
    endif
    DEFINES += EMBEDDED_NO_FILE
endif  

    
    

ifeq ($(CONFIG_APP_PIPELINE),BATTERY_POWERED_LOCAL_VOICE)
    DEFINES += BATTERY_POWERED_LOCAL_VOICE
    COMPONENTS += BATTERY_POWERED_APP_HP
#For USB building
    COMPONENTS += EMUSB
    COMPONENTS += USBD_BASE
#Staged Voice Control Middleware on M55
    COMPONENTS += HP_APP_SVC
    DEFINES += ENABLE_SVC_HP_MW
    ENABLE_SVC_IPC_BY_PDL_PIPE=Y
    ifeq ($(ENABLE_SVC_IPC_BY_PDL_PIPE), Y)
#Inter-core pipe
        COMPONENTS += INTERCORE_PIPE
        DEFINES += INTERCORE_PIPE  
        DEFINES += ENABLE_SVC_IPC_BY_PDL_PIPE
    endif
endif

ifeq ($(CONFIG_APP_PIPELINE),MAINS_POWERED_LOCAL_VOICE)
#For USB building
    COMPONENTS += EMUSB
    COMPONENTS += USBD_BASE
#Push to talk control via User Button.
    COMPONENTS += PUSH_TO_TALK
#Audio input
    COMPONENTS += AUDIO_INPUT
#Application control macro definition
    ifeq ($(DEBUG_TUNING_MODE),DISABLED)
#Actual application flow for Mains Powered Application
        DEFINES += MAINS_POWERED_LOCAL_VOICE
        COMPONENTS += MAINS_POWERED_APP
    else
#Debug and tuning flow    
#AFE Tuning enablement
        DEFINES += CY_AFE_ENABLE_TUNING_FEATURE
        DEFINES += DEBUG_TUNE_MAINS_APP
        COMPONENTS += TUNE_MAINS_APP
        COMPONENTS += USB_AUDIO
        ifeq ($(DEBUG_TUNING_MODE),PDM_MIC_IN)
            DEFINES += ENABLE_MIC_INPUT_FEED
        endif
#USB input is stereo channel only.        
        ifeq ($(DEBUG_TUNING_MODE),USB_AUD_IN)
#AFE middleware priority
            DEFINES +=AFE_AUDIO_PROCESSING_TASK_PRIORITY=2
            DEFINES += USB_AUDIO_INPUT
        endif
    endif        
endif

################################################################################
# Paths
################################################################################

# Relative path to the project directory (default is the Makefile's directory).
#
# This controls where automatic source code discovery looks for code.
CY_APP_PATH=

# Relative path to the shared repo location.
#
# All .mtb files have the format, <URI>#<COMMIT>#<LOCATION>. If the <LOCATION> field 
# begins with $$ASSET_REPO$$, then the repo is deposited in the path specified by 
# the CY_GETLIBS_SHARED_PATH variable. The default location is one directory level 
# above the current app directory.
# This is used with CY_GETLIBS_SHARED_NAME variable, which specifies the directory name.
CY_GETLIBS_SHARED_PATH=../..

# Directory name of the shared repo location.
#
CY_GETLIBS_SHARED_NAME=mtb_shared

# Absolute path to the compiler's "bin" directory.
#
# The default depends on the selected TOOLCHAIN (GCC_ARM uses the ModusToolbox
# software provided compiler by default).
CY_COMPILER_PATH?=


CY_AVC_PATH=$(SEARCH_audio-voice-core)
CY_AFE_PATH=$(SEARCH_audio-front-end)
CY_SOD_PATH=$(SEARCH_speech-onset-detection)

ifeq ($(CONFIG_INFERENCING_LIB),SENSORY)
    CY_IGNORE +=${CY_SOD_PATH}
endif

ifeq ($(CONFIG_VOICE_CORE_MODE),FULL)
    CY_IGNORE += ${CY_AVC_PATH}/lib/SP_ENH/demo
endif

ifeq ($(CONFIG_VOICE_CORE_MODE),LIMITED)
    CY_IGNORE += ${CY_AVC_PATH}/lib/SP_ENH/full
endif

ifeq ($(ITSI_LIB),N)
    CY_IGNORE += $(SEARCH_ml-middleware)
    CY_IGNORE += $(SEARCH_ml-tflite-micro)
endif


ifeq ($(ENABLE_PLAYBACK),Y)
ifeq ($(CONFIG_PLAYBACK_RATE),48K)
    CY_IGNORE += ./source/COMPONENT_MODULES_HP/COMPONENT_AUDIO_PLAYBACK/audio_data/drums_16KHz_1ch_16bit.wav.h
    CY_IGNORE += ./source/COMPONENT_MODULES_HP/COMPONENT_AUDIO_PLAYBACK/audio_data/piano_16KHz_1ch_16bit.wav.h
    
    CY_IGNORE += ./source/COMPONENT_MODULES_HP/COMPONENT_AUDIO_PLAYBACK/audio_data/drums_44_1KHz_1ch_16bit.wav.h
    CY_IGNORE += ./source/COMPONENT_MODULES_HP/COMPONENT_AUDIO_PLAYBACK/audio_data/piano_44_1KHz_1ch_16bit.wav.h
    CY_IGNORE += ./source/COMPONENT_MODULES_HP/COMPONENT_AUDIO_PLAYBACK/audio_data/guitar_44_1KHz_1ch_16bit.wav.h
    
endif

ifeq ($(CONFIG_PLAYBACK_RATE),16K)

    CY_IGNORE += ./source/COMPONENT_MODULES_HP/COMPONENT_AUDIO_PLAYBACK/audio_data/drums_48KHz_1ch_16bit.wav.h
    CY_IGNORE += ./source/COMPONENT_MODULES_HP/COMPONENT_AUDIO_PLAYBACK/audio_data/piano_48KHz_1ch_16bit.wav.h
    CY_IGNORE += ./source/COMPONENT_MODULES_HP/COMPONENT_AUDIO_PLAYBACK/audio_data/guitar_48KHz_1ch_16bit.wav.h
    
    CY_IGNORE += ./source/COMPONENT_MODULES_HP/COMPONENT_AUDIO_PLAYBACK/audio_data/drums_44_1KHz_1ch_16bit.wav.h
    CY_IGNORE += ./source/COMPONENT_MODULES_HP/COMPONENT_AUDIO_PLAYBACK/audio_data/piano_44_1KHz_1ch_16bit.wav.h
    CY_IGNORE += ./source/COMPONENT_MODULES_HP/COMPONENT_AUDIO_PLAYBACK/audio_data/guitar_44_1KHz_1ch_16bit.wav.h

endif

ifeq ($(CONFIG_PLAYBACK_RATE),44.1K)

    CY_IGNORE += ./source/COMPONENT_MODULES_HP/COMPONENT_AUDIO_PLAYBACK/audio_data/drums_16KHz_1ch_16bit.wav.h
    CY_IGNORE += ./source/COMPONENT_MODULES_HP/COMPONENT_AUDIO_PLAYBACK/audio_data/piano_16KHz_1ch_16bit.wav.h
    
    CY_IGNORE += ./source/COMPONENT_MODULES_HP/COMPONENT_AUDIO_PLAYBACK/audio_data/drums_48KHz_1ch_16bit.wav.h
    CY_IGNORE += ./source/COMPONENT_MODULES_HP/COMPONENT_AUDIO_PLAYBACK/audio_data/piano_48KHz_1ch_16bit.wav.h
    CY_IGNORE += ./source/COMPONENT_MODULES_HP/COMPONENT_AUDIO_PLAYBACK/audio_data/guitar_48KHz_1ch_16bit.wav.h

endif
endif

ifeq ($(ENABLE_PLAYBACK),N)
    CY_IGNORE += ./source/COMPONENT_MODULES_HP/COMPONENT_AUDIO_PLAYBACK
    CY_IGNORE += ./source/COMPONENT_MAINS_POWERED_APP/mains_powered_music_player.c
    CY_IGNORE += ./source/COMPONENT_MAINS_POWERED_APP/mains_powered_music_player.h
    CY_IGNORE += ./source/COMPONENT_MODULES_HP/COMPONENT_TUNE_MAINS_APP/tune_mains_powered_music_player.c
    CY_IGNORE += ./source/COMPONENT_MODULES_HP/COMPONENT_TUNE_MAINS_APP/tune_mains_powered_music_player.h
    CY_IGNORE += ./source/COMPONENT_BATTERY_POWERED_APP_HP/battery_powered_music_player.c
    CY_IGNORE += ./source/COMPONENT_BATTERY_POWERED_APP_HP/battery_powered_music_player.h
endif

include $(CY_TOOLS_DIR)/make/start.mk
